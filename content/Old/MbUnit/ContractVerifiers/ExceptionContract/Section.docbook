<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Copyright 2005-2009 Gallio Project - http://www.gallio.org/
// Portions Copyright 2000-2004 Jonathan De Halleux, Jamie Cansdale
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
-->
<section version="5.0"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>The Exception Contract Verifier</title>
  <para>
    The Exception Contract Verifier adds to a fixture, several tests which evaluate a custom user exception. The contract verifier is declared as a public read-only field of the test fixture. It has the following specifications:
  </para>
  <programlisting language="cs">
    <![CDATA[public class ExceptionContract<TException> : IContract
      : where TException : Exception
    {
      public bool ImplementsOperatorOverloads
      {
        get;
        set;
      }
      
      public bool ImplementsStandardConstructors
      {
        get;
        set;
      }
    }]]></programlisting>
  <para>
    A simple and typical usage is:
  </para>
  <programlisting language="cs">
    <![CDATA[using System;
    using MyLibrary;
    using MbUnit.Framework;
    using MbUnit.Framework.ContractVerifiers;

    namespace MyLibrary.Test
    {
        [TestFixture]
        public class MyExceptionTest
        {
          [VerifyContract]
          public readonly IContract ExceptionTests = new ExceptionContract<MyException>
          {
            ImplementsSerialization = true; // Optional (default is true)
            ImplementsStandardConstructors = true; // Optional (default is true)
          };
        }
    }]]></programlisting>
  <para>
    The contract verifier takes only one single required type parameter defining the type of the tested exception; <emphasis role="bold">MyException</emphasis>, in the example above. The optional properties <emphasis role="bold">ImplementsSerialization</emphasis> and <emphasis role="bold">ImplementsStandardConstructors</emphasis> disable some of the test methods described below.
  </para>
  <para>
    The verifier adds at runtime, five test methods to the test fixture:<itemizedlist>
    <listitem>
      <para>
        <emphasis role="bold">HasSerializableAttribute</emphasis> verifies that the tested exception type has the attribute <emphasis role="bold">System.Serializable</emphasis>. Setting the property <emphasis role="bold">ImplementsSerialization</emphasis> to <emphasis role="bold">false</emphasis> in the definition of the contract verifier, deactivates that test.
      </para>
    </listitem>
    <listitem>
      <para>
        <emphasis role="bold">HasSerializationConstructor</emphasis> verifies that the tested exception type has a non-public constructor similar to <emphasis role="bold">System.Exception(SerializationInfo, StreamingContext)</emphasis>. Setting the property <emphasis role="bold">ImplementsSerialization</emphasis> to <emphasis role="bold">false</emphasis> in the definition of the contract verifier, deactivates that test.
      </para>
    </listitem>
     <listitem>
      <para>
        <emphasis role="bold">DefaultConstructor</emphasis> verifies that a public default constructor is present. If the property <emphasis role="bold">ImplementsSerialization</emphasis> was not set to false, it verifies that the message and the inner exception properties are preserved by a roundtrip serialization as well. Setting the property <emphasis role="bold">ImplementsStandardConstructors</emphasis> to <emphasis role="bold">false</emphasis> in the definition of the contract verifier, deactivates that test.
      </para>
    </listitem>
     <listitem>
      <para>
        <emphasis role="bold">MessageConstructor</emphasis> verifies that a public constructor with one single parameter for the message is present. If the property <emphasis role="bold">ImplementsSerialization</emphasis> was not set to false, it verifies that the message and the inner exception properties are preserved by a roundtrip serialization as well. Setting the property <emphasis role="bold">ImplementsStandardConstructors</emphasis> to <emphasis role="bold">false</emphasis> in the definition of the contract verifier, deactivates that test.
      </para>
    </listitem>
     <listitem>
      <para>
        <emphasis role="bold">MessageAndInnerExceptionConstructor</emphasis> verifies that a public constructor with two parameters for the message and the inner exception is present. If the property <emphasis role="bold">ImplementsSerialization</emphasis> was not set to false, it verifies that the message and the inner exception properties are preserved by a roundtrip serialization as well. Setting the property <emphasis role="bold">ImplementsStandardConstructors</emphasis> to <emphasis role="bold">false</emphasis> in the definition of the contract verifier, deactivates that test.
      </para>
    </listitem>
    </itemizedlist>
  </para>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/sample-report.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</section>
