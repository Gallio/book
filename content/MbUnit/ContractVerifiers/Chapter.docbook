<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Copyright 2005-2009 Gallio Project - http://www.gallio.org/
// Portions Copyright 2000-2004 Jonathan De Halleux, Jamie Cansdale
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
-->
<chapter version="5.0"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Contract Verifiers</title>
  <section>
    <title>What are contract verifiers?</title>
    <para>The contract verifiers are built-in test fixtures for very common contractual objects such as custom exceptions or types implementing the generic <emphasis role="bold">IEquatable</emphasis> interface. A contract verifier is a complete and configurable test suite. It automatically enables several test methods which evaluate exhaustively the functionalities and the behaviors of your custom contractual type.</para>
    <para>The contract verifiers are declared as public read-only fields of your test fixture. They are marked by the special attribute <emphasis role="bold">VerifyContract</emphasis> as well. An hypothetical declaration of a contract verifier for the <emphasis role="bold">Foo</emphasis> contract would be declared like this:</para>
    <programlisting language="cs">
    <![CDATA[using System;
    using MyLibrary;
    using MbUnit.Framework;
    using MbUnit.Framework.ContractVerifiers;

    namespace MyLibrary.Test
    {
      [TestFixture]
      public class MyFooTest
      {
        [VerifyContract]
        public readonly IContract FooTests = new FooContract
        {
          Option1 = value1,
          Option2 = value2
        };
      }
    }]]></programlisting>
    <para>Remark the different named options set at the declaration of the contract verifier. Those options are used to configure the contract verifier. They also make it more flexible by letting you enable or disable certain features at your convenience.</para>
  </section>
  <xi:include href="ExceptionContract/Section.docbook" />
  <xi:include href="EqualityContract/Section.docbook" />
  <xi:include href="ComparisonContract/Section.docbook" />
  <xi:include href="ImmutabilityContract/Section.docbook" />
</chapter>
