<?xml version="1.0" encoding="utf-8"?>
<chapter version="5.0"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Creating Test Frameworks</title>
  <section>
    <title>Concepts</title>
    <para>
      TODO
    </para>
    </section>
  <section>
    <title>The EasyTest SampleFramework</title>
    <para>
      The EasyTest sample illustrates the process of creating a new test framework
      using Gallio.  Gallio provides the platform and test runners so
      the framework is only concerned with the syntax.
    </para>
    <para>
      Our sample test framework will be called EasyTest.  We present
      two different implementations of EasyTest dubbed Low-Level and High-Level.
    </para>
  </section>
  <section>
    <title>EasyTest syntax</title>
    <para>
      To keep the sample simple but interesting, EasyTest defines
      only a few different syntax elements.
    </para>
    <para>
      TODO
    </para>
  </section>
  <section>
    <title>Low-Level Implementation</title>
    <para>
      The low-level implementation is a bare-metal implementation of the
      framework on Gallio.  It directly implements the ITestFramework
      interface and performs its own reflection.
    </para>
    <para>
      Working in this way, a framework has full control over its syntax.
      It can generate test structure using reflection and other means
      at will.
    </para>
    <para>
      The low-level interfaces  shown here are also applicable to the
      implementation of adapters for existing test frameworks.  A test
      framework adapter only differs in how it generates the structure
      of its tests.  Instead of performing reflection, it may ask the
      adapted test framework to generate a tree of tests which is then
      transformed into a Gallio test tree.
    </para>
    <para>
      Likewise, the low-level interfaces may be used to construct tests
      from metadata stored in other forms such as XML-based test
      specifications.  Or adapters may be created for test frameworks
      not implemented with .Net (by means of pipes, for example).
    </para>
    <para>
      The low-level interfaces expose all of the power of the Gallio
      test framework API.  However, if you are developing a new test
      framework from scratch you may leverage more Gallio infrastructure
      using the high-level interfaces described next.
    </para>
    <para>
      TODO concepts
    </para>
    <para>
      TODO implementation walkthrough      
    </para>
  </section>
  <section>
    <title>High-Level Implementation</title>
    <para>
      The high-level implementation leverages an abstract test framework
      provided by Gallio, called the Pattern Test Framework.
    </para>
    <para>
      The Pattern Test Framework is itself a low-level implementation of
      a test framework based on reflection over attributes.  Each attribute
      implements a distinct pattern: a rule for interpreting the semantics
      of the attribute and collaboratively populating the test tree.
    </para>
    <para>
      Defining new rules is as simple as subclassing existing attributes
      and overriding parts of their implementation to define new semantics.
      We will discuss this process in greater detail below.
    </para>
    <para>
      For branding purposes, a test framework built on the Pattern Test
      Framework should implement IPatternTestFrameworkExtension.  This
      ensures that the name of the derived framework can be presented to
      the user as appropriate.
    </para>
    <para>
      The Pattern Test Framework is somewhat abstract but very powerful.
      It is designed to simplify the task of constructing test frameworks
      with a highly composable and general feature set.  MbUnit v3 itself
      is based on it.  However, if you require more control over the process
      of test exploration and test execution you may prefer using the
      low-level interfaces directly instead.
    </para>
    <para>
      TODO concepts
    </para>
    <para>
      TODO implementation walkthrough      
    </para>
  </section>
  <section>
    <title>Summary</title>
    <para>
      In this chapter we have discussed two different implementation
      strategies for custom test frameworks on Gallio.
    </para>
    <para>
      The low-level interfaces expose all of the power of Gallio and enable
      infinite customization of the test framework syntax.  The high-level
      interfaces, in the form of the Pattern Test Framework, provide a convenient
      foundation for a powerful and composable test framework. 
    </para>
    <para>
      Build your own.
    </para>
  </section>
</chapter>
